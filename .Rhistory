for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
SMI <- data
colnames(SMI) <- c("SMI")
View(SMI)
View(SMI)
plot(SMI, main="SMI")
install.packages('prophet')
install.package('tsfknn')
install.packages("prophet")
knitr::opts_chunk$set(echo = TRUE)
install.packages('prophet')
install.packages('tsfknn')
library(quantmod)
library(ggplot2)
library(forecast)
library(tseries)
library(rugarch)
library(prophet)
library(tsfknn)
library(TTR)
library(PerformanceAnalytics)
data <- NULL
tickers_index <- c("^META") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2012-05-19",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
data <- NULL
tickers_index <- c("META") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2012-05-19",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
META <- data
colnames(SMI) <- c("META")
View(META)
View(SMI)
View(SMI)
View(META)
data <- NULL
tickers_index <- c("META") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2012-05-19",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
META <- data
colnames(META) <- c("META")
View(SMI)
data <- NULL
tickers_index <- c("^SSMI") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
SMI <- data
View(SMI)
plot(META, main="META")
plot(META, main="META")
adf.test(META)
META_returns <- na.omit(diff(log(META)))
META_returns <- na.omit(diff(log(META)))
plot(META_returns, main="META Returns", ylab=NULL)
adf.test(META_returns)
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
# Calculating and storing the AICs for different model specifications
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(SMI), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
arima <- Arima(y=log(SMI), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
library(quantmod)
library(ggplot2)
library(forecast)
library(tseries)
library(rugarch)
library(prophet)
library(tsfknn)
library(TTR)
library(PerformanceAnalytics)
library(lmtest)
arima <- Arima(y=log(SMI), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
arima <- auto.arima(log(SMI), ic="aic")
arima <- auto.arima(log(SMI), ic="aic")
arima
pred <- forecast(arima,level=0.95,h=20)
plot(pred, ylab="META") + grid()
BTC <- NULL
tickers_index <- c("BTC-USD")
for (Ticker in tickers_index){
BTC <- cbind(BTC,getSymbols.yahoo(Ticker, from="2017-01-01", periodicity = "daily", auto.assign=FALSE)[,6])
}
plot(BTC)
Returns<-na.omit(diff(log(BTC)))
colnames(Returns)<-"BTC Returns"
plot(Returns)
adf.test(Returns)
chart.RollingPerformance(R = Returns, width = 30,
FUN = "sd.annualized", scale = 252, main = "One month rolling volatility")
auto.arima(Returns)
# Specify a standard GARCH model
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(1,1), model = "sGARCH"))
garchfit <- ugarchfit(data = Returns, spec = garchspec)
garchvol <- sigma(garchfit)
par(mfrow=c(2,1))
plot(garchvol, main="GARCH volatility")
plot(abs(Returns), main="Realized volatility")
garchforecast <- ugarchforecast(fitORspec = garchfit, n.ahead = 5)
plot(garchforecast, which=1)
plot(garchforecast, which=3)
data1 <- NULL
tickers_index1 <- c("IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index1){
data1 <- cbind(data1,
getSymbols.yahoo(Ticker, from="1995-01-01",
periodicity = "monthly",
auto.assign=FALSE)[,6])
}
data1 <- NULL
tickers_index1 <- c("IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index1){
data1 <- cbind(data1,
getSymbols.yahoo(Ticker, from="1995-01-01",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
data1 <- NULL
tickers_index1 <- c("IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index1){
data1 <- cbind(data1,
getSymbols.yahoo(Ticker, from="1999-01-01",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
nasdaq <- NULL
tickers_index <- c("nasdaq")
for (Ticker in tickers_index){
nasdaq <- cbind(nasdaq,getSymbols.yahoo(Ticker, from="1998-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
nasdaq <- NULL
tickers_index <- c("nasdaq")
for (Ticker in tickers_index){
nasdaq <- cbind(nasdaq,getSymbols.yahoo(Ticker, from="1998-01-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
data <- NULL
tickers_index <- c("^IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
nasdaq <- data
colnames(nasdaq) <- c("nasdaq")
View(nasdaq)
data <- NULL
tickers_index <- c("^IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
nasdaq <- data
colnames(nasdaq) <- c("nasdaq")
plot(nasdaq)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(quantmod)
library(ggplot2)
library(forecast)
library(tseries)
library(rugarch)
library(prophet)
library(tsfknn)
library(TTR)
library(PerformanceAnalytics)
library(lmtest)
data <- NULL
tickers_index <- c("META") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2012-05-19",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
META <- data
colnames(META) <- c("META")
summary(META)
plot(META, main="META")
adf.test(META)
META_returns <- na.omit(diff(log(META)))
plot(META_returns, main="META Returns", ylab=NULL)
adf.test(META_returns)
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
# Calculating and storing the AICs for different model specifications
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(META), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
arima <- Arima(y=log(META), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
arima <- auto.arima(log(META), ic="aic")
arima
pred <- forecast(arima,level=0.95,h=20)
plot(pred, ylab="META") + grid()
data <- NULL
tickers_index <- c("^IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
nasdaq <- data
colnames(nasdaq) <- c("nasdaq")
plot(nasdaq)
chart.RollingPerformance(R = Returns, width = 30,
FUN = "sd.annualized", scale = 252, main = "One month rolling volatility")
auto.arima(Returns)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(1,1), model = "sGARCH"))
# Estimate the model
garchfit <- ugarchfit(data = Returns, spec = garchspec)
# Use the method sigma to retrieve the estimated volatilities
garchvol <- sigma(garchfit)
# Plot the GARCH and realized volatility
par(mfrow=c(2,1))
plot(garchvol, main="GARCH volatility")
plot(abs(Returns), main="Realized volatility")
garchforecast <- ugarchforecast(fitORspec = garchfit, n.ahead = 5)
plot(garchforecast, which=1)
plot(garchforecast, which=3)
GOOG
data.goog <- NULL
tickers_index <- c("GOOG") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data.goog <- cbind(data.goog,
getSymbols.yahoo(Ticker, from="2004-08-20",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
goog <- data.goog
colnames(goog) <- c("goog")
data.apple <- NULL
tickers_index <- c("AAPL") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data.apple <- cbind(data.apple,
getSymbols.yahoo(Ticker, from="2004-08-20",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
apple <- data.apple
colnames(apple) <- c("apple")
par(mfrow=c(3,1))
plot(META, main="META")
plot(goog, main="Google")
plot(apple, main="Apple")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(quantmod)
library(ggplot2)
library(forecast)
library(tseries)
library(rugarch)
library(prophet)
library(tsfknn)
library(TTR)
library(PerformanceAnalytics)
library(lmtest)
data <- NULL
tickers_index <- c("META") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="2012-05-19",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
META <- data
colnames(META) <- c("META")
summary(META)
lineChart(META,theme = chartTheme("black"))
barChart(META,theme=chartTheme("white"))
addSMA(n=5,col="darkblue")
addSMA(n=21,col="darkred")
legend("bottomright",col=c("darkblue","darkred"),lty=1,legend = c("SMA(5)","SMA(21)"),cex=0.6)
data.goog <- NULL
tickers_index <- c("GOOG") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data.goog <- cbind(data.goog,
getSymbols.yahoo(Ticker, from="2004-08-20",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
goog <- data.goog
colnames(goog) <- c("goog")
data.apple <- NULL
tickers_index <- c("AAPL") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data.apple <- cbind(data.apple,
getSymbols.yahoo(Ticker, from="1980-12-13",
periodicity = "weekly",
auto.assign=FALSE)[,6])
}
apple <- data.apple
colnames(apple) <- c("apple")
par(mfrow=c(3,1))
plot(META, main="META")
plot(goog, main="Google")
plot(apple, main="Apple")
adf.test(META)
adf.test(META)
adf.test(goog)
adf.test(META)
adf.test(goog)
adf.test(apple)
google_returns <- na.omit(diff(log(goog)))
plot(google_returns, main="Google Returns", ylab=NULL)
adf.test(google_returns)
apple_returns <- na.omit(diff(log(apple)))
plot(apple_returns, main="Apple Returns", ylab=NULL)
adf.test(apple_returns)
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(goog), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(META), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(goog), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic.goog[i+1,j+1]<-Arima(y=log(goog), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(goog), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
arima_aic.goog <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic.goog) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic.goog) <- c(0:max.order) # Order of MA(q) in columns
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic.goog[i+1,j+1]<-Arima(y=log(goog), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic.goog
View(arima_aic.goog)
View(arima_aic.goog)
arima_aic.apple <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic.apple) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic.apple) <- c(0:max.order) # Order of MA(q) in columns
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic.apple[i+1,j+1]<-Arima(y=log(apple), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic.apple
index.goog <- which(arima_aic.goog == min(arima_aic.goog), arr.ind = TRUE)
ar.goog <- as.numeric(rownames(arima_aic.goog)[index[1]])
ma.goog <- as.numeric(colnames(arima_aic.goog)[index[2]])
index.apple <- which(arima_aic.apple == min(arima_aic.apple), arr.ind = TRUE)
ar.apple <- as.numeric(rownames(arima_aic.apple)[index[1]])
ma.apple <- as.numeric(colnames(arima_aic.apple)[index[2]])
arima <- Arima(y=log(META), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
arima.goog <- Arima(y=log(goog), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima.goog)
arima.apple <- Arima(y=log(apple), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima.apple)
arima <- auto.arima(log(META), ic="aic")
pred <- forecast(arima,level=0.95,h=20)
plot(pred, ylab="META") + grid()
arima.google1 <- auto.arima(log(goog), ic="aic")
pred.google <- forecast(arima.google1,level=0.95,h=20)
plot(pred.google, ylab="Google") + grid()
data <- NULL
tickers_index <- c("^SSMI") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "weekly", auto.assign=FALSE)[,6])
}
SMI <- data
colnames(SMI) <- c("SMI")
plot(SMI, main="SMI")
adf.test(SMI)
## Interpretation: According to the ADF-test, the level data of the SMI is not stationary and can thus not (yet) be modelled using AR-, MA- or ARIMA-models.
# Calculating log returns
SMI_returns <- na.omit(diff(log(SMI)))
# Plotting SMI returns and testing for stationarity
plot(SMI_returns, main="SMI Returns", ylab=NULL)
adf.test(SMI_returns) # SMI returns are stationary
## Interpretation: According to the ADF-test, log returns of the SMI are stationary and can thus be modelled using AR-, MA- or ARIMA-models.
# Identifying the orders p and q of the ARIMA(p,1,q)-model by testing different model specifications
max.order <- 2 # We only allow a maximum of two AR- and/or MA-terms
d <- 1 # The order of integration d is set to 1 since the SMI is non-sationary in levels but stationary in first differences
# Defining the matrix in which the values of the AICs for different model specifications are stored
arima_aic <- matrix(NA, ncol=max.order+1, nrow=max.order+1)
row.names(arima_aic) <- c(0:max.order) # Order of AR(p) in rows
colnames(arima_aic) <- c(0:max.order) # Order of MA(q) in columns
# Calculating and storing the AICs for different model specifications
for(i in 0:max.order){
for(j in 0:max.order){
arima_aic[i+1,j+1]<-Arima(y=log(SMI), order=c(i,d,j), include.constant =  TRUE)$aic
}
}
arima_aic
# Finding the model specification which minimizes the AIC
index <- which(arima_aic == min(arima_aic), arr.ind = TRUE)
ar <- as.numeric(rownames(arima_aic)[index[1]])
ma <- as.numeric(colnames(arima_aic)[index[2]])
## Interpretation: The Akaike information criterion (AIC) is minimized for the ARIMA(1,1,1) including a drift term, hence for an ARIMA including one autoregressive and one moving average term.
# Estimating the optimal ARIMA-model and testing for significance of the coefficients
arima <- Arima(y=log(SMI), order=c(ar,1,ma), include.constant = TRUE)
coeftest(arima)
## Interpretation: All coefficients are significant at the 95% confidence interval.
####The negative value of the AR-coefficient reveals that a positive change in the time series in the previous period leads to a negative change in the subsequent period. The positive value of the MA-coefficient reveals that a positive residual in the previous period has a positive effect on the time series in the subsequent period.
# Shortcut! Estimating the orders of the ARIMA(p,d,q) automatically
arima <- auto.arima(log(SMI), ic="aic") # The auto.arima function automatically tests and corrects for non-stationarity and allows, per default, for a drift component and seasonal components
pred <- forecast(arima,level=0.95,h=20)
plot(pred, ylab="SMI") + grid()
Returns<-na.omit(diff(log(META)))
colnames(Returns)<-"META Retourns"
plot(Returns)
adf.test(Returns)
chart.RollingPerformance(R = Returns, width = 30,
FUN = "sd.annualized", scale = 252, main = "One month rolling volatility")
auto.arima(Returns)
garchspec <- ugarchspec(mean.model = list(armaOrder = c(1,1)),
variance.model = list(garchOrder = c(1,1), model = "sGARCH"))
# Estimate the model
garchfit <- ugarchfit(data = Returns, spec = garchspec)
# Use the method sigma to retrieve the estimated volatilities
garchvol <- sigma(garchfit)
# Plot the GARCH and realized volatility
par(mfrow=c(2,1))
plot(garchvol, main="GARCH volatility")
plot(abs(Returns), main="Realized volatility")
garchforecast <- ugarchforecast(fitORspec = garchfit, n.ahead = 5)
plot(garchforecast, which=1)
plot(garchforecast, which=3)
data <- NULL
tickers_index <- c("^IXIC") # Ticker from Yahoo Finance for the SMI
for (Ticker in tickers_index){
data <- cbind(data,
getSymbols.yahoo(Ticker, from="1990-01-01", periodicity = "monthly", auto.assign=FALSE)[,6])
}
nasdaq <- data
colnames(nasdaq) <- c("nasdaq")
plot(nasdaq)
arima <- auto.arima(log(META), ic="aic")
pred <- forecast(arima,level=0.95,h=20)
plot(pred, ylab="META") + grid()
